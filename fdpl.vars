#### Fixed variables
#### This file is updated with fdpl-update.sh script
#### Use fdpl.local.vars to override, or make your own branch

echo "... Set vars"

if [ "$USER" != "root" ]; then
  echo "Not root, needed for building Live Debian"
  exit 1
fi

SCRIPT=$(basename $0)
START_TIME=$(date +%s)
START_DATE=$(date +%y%m%d%H%M)
LABEL_1=grub-$START_DATE
LABEL_2=maint-$START_DATE
LABEL_3=prod-$START_DATE

# parameters for build and install
ARCH=amd64
DIST=bookworm
# During install, root password is copied.
# Take default if there is no root password.
DEFAULT_ROOT_PASSWORD=debian
# Boot type, EFI or MBR
BOOT_TYPE=EFI

# New hostnames
NEW_BUILD_HOSTNAME=fdpl-$START_DATE
NEW_INSTALL_HOSTNAME=fdpl-$START_DATE

MIN_DISK_SIZE=8   # maint: 3GB, prod: 5GB
PART_END_GRUB=32MB
PART_END_MAINT=3GB

# Folders, files
FDPL_FOLDER=/root/fdpl-debian
MOUNT_FOLDER=/mnt/fdpl-debian
LB_FOLDER_NAME=lb
LOCAL_FOLDER_NAME=local
FIRMWARE_FOLDER_NAME=firmware
LOG_FOLDER_NAME=log
LOG_FILE_BASENAME=$SCRIPT.$(date +%Y%m%d%H%M%S).log
LOCAL_VARS_FILE=fdpl.local.vars

# GIT branch for updates
BRANCH=main   # can use local.conf override for own branch

# Get local vars
if [ -e $FDPL_FOLDER/$LOCAL_VARS_FILE ]; then
  if [ -z "$FIRST_LOCAL_CONF" ]; then
    FIRST_LOCAL_VARS=done
    echo "... Set local vars from $LOCAL_VARS_FILE"
    source $FDPL_FOLDER/$LOCAL_VARS_FILE
  fi
else
  echo "... No $LOCAL_VARS_FILE local config file"
  echo "... Create a default one"
  echo "# Default $LOCAL_VARS_FILE file" >$FDPL_FOLDER/$LOCAL_VARS_FILE
  cat <<end-of-local-conf-file >>$FDPL_FOLDER/$LOCAL_VARS_FILE
# Parameters for build and install
ARCH=amd64
DIST=bookworm
# GIT branch for updates
BRANCH=main
end-of-local-conf-file
fi

# Generated vars
LB_FOLDER=$FDPL_FOLDER/$LB_FOLDER_NAME
LOCAL_FOLDER=$FDPL_FOLDER/$LOCAL_FOLDER_NAME
FIRMWARE_FOLDER=$FDPL_FOLDER/$FIRMWARE_FOLDER_NAME
LOG_FOLDER=$FDPL_FOLDER/$LOG_FOLDER_NAME
LOGFILE=$LOG_FOLDER/$LOG_FILE_BASENAME
NEW_FDPL_FOLDER=$MOUNT_FOLDER/.$FDPL_FOLDER
NEW_LB_FOLDER=$MOUNT_FOLDER/.$LB_FOLDER
NEW_LOCAL_FOLDER=$MOUNT_FOLDER/.$LOCAL_FOLDER
NEW_LOG_FOLDER=$MOUNT_FOLDER/.$LOG_FOLDER
NEW_LOGFILE=$NEW_LOG_FOLDER/$LOG_FILE_BASENAME
TARFILE=fdpl-debian-$DIST-$ARCH.tar

ROOT_PART=$(mount | grep " on / " | cut -d " " -f 1)
ROOT_DEV="/dev/$(lsblk -no pkname $ROOT_PART)"
ROOT_PARTITION1=$(fdisk -l $ROOT_DEV 2>/dev/null | egrep -A 3 "^Device " | awk 'NR==2 {print $1}')
ROOT_PARTITION2=$(fdisk -l $ROOT_DEV 2>/dev/null | egrep -A 3 "^Device " | awk 'NR==3 {print $1}')
ROOT_PARTITION3=$(fdisk -l $ROOT_DEV 2>/dev/null | egrep -A 3 "^Device " | awk 'NR==4 {print $1}')

# GIT repo for updates
URL=https://github.com/tecoboot/fdpl-debian/archive/refs/heads/$BRANCH.zip

### fdpl functions & housekeeping ###

function die() {
  echo "$@"
  exit 1
}

# Folders
mkdir -p $LOG_FOLDER $LOCAL_FOLDER $FIRMWARE_FOLDER $LB_FOLDER

# prepare logging
echo "$(date) $SCRIPT $@ started, vars: $DIST $ARCH $BRANCH" >>$LOGFILE
function follow_latest_log() {
  # delete own log, not interesting
  rm -rf $LOGFILE
  echo "+++++++ $(ls -t log/$SCRIPT*.log | head -1) +++++++"
  tail -f $(ls -t log/$SCRIPT*.log | head -1)
}
function log_ended_message() {
  END_TIME=$(date +%s)
  echo "$(date) $SCRIPT $@ ended, took $(($END_TIME - $START_TIME)) seconds" >>$LOGFILE
}
